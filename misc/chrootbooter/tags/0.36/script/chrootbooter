#!/usr/bin/perl -w

use strict;

=head1 NAME

chrootbooter - Script to "boot" chroots

=head1 SYNOPSIS

 chrootbooter start
 chrootbooter start some_chroot
 chrootbooter stop /srv/chroots/some_chroot
 chrootbooter -d /src/more_chroots stop some_chroot

=head1 CALLING CONVENTION

There are three ways to call C<chrootbooter>:

=over 4

=item C<chrootbooter I<action>>

It acts on every C<chroot> found in the C<chroot> repository (given in the
configuration file or with the C<-d> switch).

=item C<chrootbooter I<action> I<some_chroot>>

It acts on the given C<chroot>, relative to the C<chroot> repository.

=item C<chrootbooter I<action> I<absolute_directory>>

It acts on the given C<chroot>, regardless of the C<chroot> repository.

=back


=head1 ACTIONS

There are two actions: C<start> and C<stop>. The first one calls every init
script on level 3 on every C<chroot> it's going to act on. On the other hand,
C<stop> calls every init script on level 0 on every C<chroot> it's going to act
on. It's strongly recommended that every C<chroot> is checked for non-used init
scripts, and it's kept clean.

In both cases, init scripts whose name matches the filter regular expression
aren't touched.

The C<-n> switch is very useful to try out and see what init scripts would be
called.


=head1 CONFIGURATION FILES

There are two kinds of configuration files for C<chrootbooter>:

=over 4

=item Host configuration files

Currently only one, C</etc/chrootbooter.ini>. It has generic configuration
parameters for the C<chrootbooter> executable.

=item Per-chroot configuration files

Currently only one, C</etc/chrb/pre.conf>, inside each C<chroot>. It has
specific configuration for each C<chroot>.

=back


=head2 C</etc/chrootbooter.ini>

In this configuration file you can specify paths and init script parameters.
Currently there are three configuration keys:

 [path]
 repo = /srv
 chroot_bin = /usr/sbin/chroot

 [init_scripts]
 filter = halt|sendsigs|hwclock|umountfs|umountnfs

 [networking]
 interface = eth0

The first one specifies the directory where the chroot reside. The second one,
the absolute path for the C<chroot> executable. The third one is a filter (a
Perl regular expression) of init scripts that should be always ignored.


=head2 C</etc/chrb/pre.conf>

This configuration file stores information for each C<chroot>. It currently has
three possible directives:

 ensure_preload /some/path/to/libchrb.so.1
 bind /proc /proc
 rbind /dev /dev

The C<ensure_preload> directive specifies some library that should be loaded
with the C<LD_PRELOAD> trick. When present, C<chrootbooter> checks if the
library is in the C<chroot>, tries to copy it from the host if not, and adds it
to C</etc/ld.so.preload> inside the C<chroot>, if it's not already. A special
library, designed to be used with the C<ensure_preload> directive, is
distributed with C<chrootbooter>: C<libchrb>. See the C<libchrb> section for
details.

The C<bind> directive mounts (with the C<--bind> option) the specified host
directory (the first one) in the given C<chroot> directory (the second one),
when starting, or umount when stopping. If both are the same, it can be
specified as C<bind /onedir>.

The C<rbind> directive is similar to the C<bind> one, only using the C<--rbind>
option instead of C<--bind> in the C<mount> call.


=head1 THE C<libchrb> LIBRARY

Alongside with C<chrootbooter>, a special library is distributed, C<libchrb>.
This library allows chroots to have some kind of "own IP", thus allowing
administrators to treat chroots as a sort of "cheap" virtual machines.

To use it, simply declare it in each chroot with the C<ensure_preload>
directive, as e.g. C<ensure_preload /usr/local/lib/libchrb.so.1>.

Its main feature is "assigning" an IP address to a chroot. How is this
achieved? Capturing every call to C<bind> with the binding address C<0.0.0.0>,
and changing it to a similar call to C<bind>, but substituting the chroot IP
adress for the original C<0.0.0.0>. This means two things:

=over 4

=item 1

You have to put the chroot IP in the file C</etc/chrb/ip>, inside the chroot.

=item 2

You have to make sure that the services in the chroot B<don't listen to
127.0.0.1>. If they do, they will conflict with each other. You'll have to
change them to listen to C<0.0.0.0>.

=item 3

You have to choose a network interface (in the host machine) to make alias to.
You can configure it via the C<[networking]/interface> option.

=back

Another, related feature, is allowing the administrator to assign a hostname to
the chroots, by changing the C<hostname> system call to make it B<always> read
it from C</etc/hostname>.


=head1 LICENSE

 Copyright (C) 2005 Esteban Manchado Vel\['a]zquez <zoso@foton.es>

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=cut

our $VERSION = 0.36;

use File::Copy qw(copy);
use IO::Socket;
use IO::Interface qw(:flags);
use Term::ANSIColor;


# Print information on the screen
sub print_info {
    print colored($_[0], 'blue');
}

# Print a warning on the screen
sub print_warning {
    print STDERR colored($_[0], 'red');
}

# Prints program usage and exits
sub usage {
    print STDERR <<EOUSAGE;
chrootbooter version $VERSION.
Usage: chrootbooter [-v] [-q] [-n] [-d chroot_repo_dir] start|stop [chroot]

Examples:
   chrootbooter -d /var/chroots start
   chrootbooter stop /var/chroots/my_dev_chroot
   chrootbooter stop my_dev_chroot
   chrootbooter start my_dev_chroot my_other_chroot

Options:
   -n         Do nothing
   -v         Verbose
   -q         Quiet
EOUSAGE
    exit 1;
}

# Get only dirs (not hidden) inside directory $dir
sub get_dirs {
    my ($dir) = @_;
    opendir D, $dir;
    my @dirs = grep { -d $_ }                   # Only dirs
                    map { $dir.'/'.$_ }         # Add repo dir
                        grep { $_ !~ /^\./ }    # Ignore hidden dirs
                             readdir D;
    closedir D;
    @dirs;
}

# Get init script paths
sub get_init_scripts {
    my ($chroot, $init_level, $filter) = @_;

    my $dir = $chroot."/etc/rc$init_level.d";
    opendir D, $dir;
    my @dirs = grep { -l $_ }               # Only symbolic links
                    map { $dir.'/'.$_ }     # Add chroot dir
                        # Sort by order number, but put 'S' scripts last
                        sort { my ($order_a, $order_b) = (substr($a, 1, 2),
                                                          substr($b, 1, 2));
                               $order_a *= 100 if substr($a, 0, 1) eq 'S';
                               $order_b *= 100 if substr($b, 0, 1) eq 'S';
                               $order_a <=> $order_b }
                             grep { $_ !~ /^\./ }   # Filter out hidden files
                                  readdir D;
    closedir D;

    # Drop chroot basedir, then apply filter
    grep {
            if ($_ =~ $filter) {
                print_warning("Warning: Ignoring init script $_\n");
                0;
            }
            else {
                1;
            }
         }
         map { $_ =~ s/^$chroot//g; $_ }
             @dirs;
}

# Normalize chroot list
sub normalize_chroots {
    my ($chroot_repo, @chroot_list) = @_;

    # Ignore non-directory entries
    grep { if (-d $_) {
	       1
	   }
	   else {
    	       print_warning("Warning: skipping '$_': not a directory\n");
	       0
	   }
	 }
	 # Add chroot repo path if it isn't an absolute path
         map { $_ =~ m|^/| ? $_ : $chroot_repo.'/'.$_ }
             @chroot_list;
}


# Read the chroot configuration file
sub read_pre_config {
    my ($path) = @_;

    my %config = ('bind' => {}, 'rbind' => {}, 'preload' => []);

    my $conf_file = "$path/pre.conf";
    if (-r $conf_file) {
        open(F, $conf_file) || return undef;
        my $linenumber = 0;
        foreach my $line (<F>) {
            $linenumber++;
            $line =~ s/\s+#.*//o;
            $line =~ s/^#.*//o;
            $line =~ s/^\s+//o;
            $line =~ s/\s+$//o;
            if ($line =~ /^(r?bind)\s+([\/a-zA-Z_.]+)(\s+([\/a-zA-Z_.]+))?$/) {
                my ($option, $hostpath, $chrpath) = ($1, $2, $4);
                $chrpath ||= $hostpath;
                $config{$option}->{$hostpath} = $chrpath;
            }
            elsif ($line =~ /^ensure_preload\s+(.+)$/) {
                push @{$config{preload}}, $1;
            }
            elsif ($line =~ /^\s*$/) {
                # Do nothing
            }
            else {
                print_warning("$conf_file: $linenumber: Syntax error\n");
            }
        }
        close F;
    }

    my $ip_conf_file = "$path/ip";
    if (-r $ip_conf_file) {
        open F, $ip_conf_file;
        chomp($config{ip} = <F>);
        close F;
    }

    \%config
}


# Returns if the given directory is bound
sub is_bound {
    my ($chroot_dir) = @_;

    my $bound = 0;
    open(F, "/proc/mounts") or die "Can't open /proc/mounts";
    while (<F>) {
        $bound = 1 if / $chroot_dir /;
    }
    close F;

    $bound;
}


# Ensure some dir is bound. If it's not, bind it, using the C<$bind_type>
# option in the C<mount> call. Returns if the directory was already bound
sub ensure_bound {
    my ($dir, $chroot_dir, $bind_type) = @_;

    $bind_type ||= 'bind';
    my $bound = is_bound($chroot_dir);
    if (!$bound) {
        if (system "mount --$bind_type $dir $chroot_dir") {
            print_warning("Couldn't bind directory $dir to $chroot_dir\n");
            exit 1;
        }
    }

    $bound;
}


# Tries to unbind a directory. Returns if the directory could be unbound
sub unbind {
    my ($chroot_dir) = @_;

    if (is_bound($chroot_dir)) {
        if (system("umount $chroot_dir") != 0) {
            print_warning("WARNING: Couldn't unbind $chroot_dir, trying with lazy option\n");
            return 0 if system("umount -l $chroot_dir") != 0;
        }
    }
    return 1;
}


# Returns the bind dir list for the given chroot and chroot configuration
sub bind_dirs {
    my ($chroot, $chroot_conf) = @_;

    my @list;
    foreach my $bind_type (qw(bind rbind)) {
        foreach my $dir (keys %{$chroot_conf->{$bind_type}}) {
            my $chroot_dir = "$chroot/$chroot_conf->{$bind_type}->{$dir}";
            $chroot_dir =~ s;//+;/;go;
            push @list, [$dir, $chroot_dir, $bind_type];
        }
    }
    @list;
}

# MAIN PROGRAM ---------------------------------------------------------------



# Load config
use Config::Tiny;
my $conf_path = '/etc/chrootbooter.ini';
my $conf = Config::Tiny->read($conf_path);
defined $conf || do {
    print_warning("Can't read configuration file '$conf_path'\n");
    exit;
};


# Parse arguments
# Options
use Getopt::Std;
my %options;
getopts('nqvd:', \%options);
$options{v} = 1 if $options{n};     # -n implies -v
# Rest of arguments
my ($action, @chroots) = @ARGV;
$action ||= '';
if ($action ne 'start' && $action ne 'stop') {
    usage;
}

# Set chroot repository directory
my $chroot_repo = $options{d} || $conf->{path}->{repo} || do {
    print_warning("You haven't specified a chroot repository\n");
    exit 1;
};
if (!-d $chroot_repo) {
    print_warning("Can't find '$chroot_repo' or it isn't a directory\n");
}


# Decide chroots to act on
if (@chroots) {
    @chroots = normalize_chroots($chroot_repo, @chroots);
}
else {
    @chroots = get_dirs($chroot_repo);
}

# Regexp to filter out potencially dangerous scripts
my $filter     = $conf->{init_scripts}->{filter} || 'halt|sendsigs|hwclock|umountfs|umountnfs';
# Path for chroot program
my $chroot_cmd = $conf->{path}->{chroot_bin}     || '/usr/sbin/chroot';
if ($chroot_cmd !~ m;^/;) {
    print_warning("Warning: Non-absolute path for chroot: trying /usr/sbin/$chroot_cmd\n");
    $chroot_cmd = "/usr/sbin/".$chroot_cmd;
}
if (!-x $chroot_cmd) {
    print_warning("Can't find $chroot_cmd. Please specify the absolute path in\n".
            "the configuration directive 'chroot_bin', under [path]\n");
}
# Init level
my $init_level = $action eq 'start' ? 3 : 0;
foreach my $chroot (@chroots) {
    my $number_equals = 78 - length("Processing $chroot ");
    print_info("Processing $chroot ".("=" x $number_equals)."\n") unless $options{q};

    # Chroot configuration
    my $chroot_conf = undef;
    my $conf_dir = "$chroot/etc/chrb";
    if (-d $conf_dir) {
        $chroot_conf = read_pre_config($conf_dir);
        if (! ref $chroot_conf) {
            print_warning("WARNING: wrong configuration for chroot $chroot\n");
        }
    }
    else {
        print_warning("WARNING: chroot $chroot doesn't have a configuration directory\n") unless $options{q};
    }

    # Pre-tasks (configuration-driven)
    if (ref $chroot_conf) {
        if ($action eq 'start' and !$options{n}) {
            foreach my $dir_info (bind_dirs($chroot, $chroot_conf)) {
                my $ret = ensure_bound(@$dir_info);
                if ($ret and !$options{q}) {
                    print_warning("Skipping already bound directory $dir_info->[1]\n");
                }
            }

            foreach my $preload (@{$chroot_conf->{preload}}) {
                # First, check it's already there. If not, try to copy from
                # host filesystem
                # Also copy it if the host one is newer (see else block below)
                if (! -r "$chroot/$preload") {
                    if (-r $preload) {
                        print_warning("WARNING: Copying $preload to $chroot\n")
                                unless $options{q};
                        copy $preload, "$chroot/$preload";
                    }
                    else {
                        print_warning("ERROR: Can't find $preload either in $chroot nor in host filesystem\n");
                        exit 1;
                    }
                }
                elsif (-r $preload &&
                       (stat($preload))[9] > (stat("$chroot/$preload"))[9]) {
                    print_warning("Upgrading $preload in $chroot\n");
                    copy $preload, "$chroot/$preload";
                }

                # Supposedly, it's already there. Now check if it's loaded from
                # /etc/ld.so.preload
                my $preload_file = "$chroot/etc/ld.so.preload";
                open F, $preload_file;
                my @preload_lines = <F>;
                close F;
                # If not present, simply add it at the end
                if (! grep /^$preload$/, @preload_lines) {
                    print_info("Adding $preload to $preload_file\n")
                            unless $options{q};
                    open(F, ">>$preload_file") or
                            die "Can't open $preload_file for writing";
                    print F $preload, "\n";
                    close F;
                }
            }

            # Network interface alias
            if ($conf->{networking}->{interface} && $chroot_conf->{ip}) {
                print_info("Checking network interface alias...") unless $options{q};
                my $s = IO::Socket::INET->new(Proto => 'udp');
                my @interfaces = grep /^$conf->{networking}->{interface}:/, $s->if_list;
                my ($found, $first_free_alias) = (0, 0);
                for my $if (@interfaces) {
                    if ($s->if_addr($if) eq $chroot_conf->{ip}) {
                        print_info(" already setup ($if -> $chroot_conf->{ip}).\n") unless $options{q};
                        $found = 1;
                    }
                    else {
                        $if =~ /^$conf->{networking}->{interface}:(\d+)/;
                        $first_free_alias = $1 + 1 if $1 >= $first_free_alias;
                    }
                }

                if (!$found) {
                    my $iface = "$conf->{networking}->{interface}:$first_free_alias";
                    my $cmd = "/sbin/ifconfig $iface $chroot_conf->{ip}";
                    print_info(" setting up $iface...") unless $options{q};
                    my $r = system($cmd);
                    if ($r == 0) {
                        print_info(" done.\n") unless $options{q};
                    }
                    else {
                        print_info($options{q} ? "Error setting up network alias $iface for $chroot\n" :
                                                 " failure ($cmd).\n");
                    }
                }
            }
        }
    }

    # Execute init scripts
    my @init_scripts = get_init_scripts($chroot, $init_level, $filter);
    @init_scripts || print_warning("WARNING: Can't find any init script in init level $init_level in $chroot\n");
    foreach my $init_script (@init_scripts) {
        print_info("Executing $init_script in chroot $chroot...\n") if $options{v};
	system("$chroot_cmd $chroot $init_script $action") unless $options{n};
    }

    if (ref $chroot_conf and $action eq 'stop' and !$options{n}) {
        foreach my $dir_info (bind_dirs($chroot, $chroot_conf)) {
            my $ret = unbind($dir_info->[1]);
            if (! $ret and !$options{q}) {
                print_warning("WARNING: Couldn't unbind directory $dir_info->[1]\n");
            }
        }

        # Network interface alias
        if ($conf->{networking}->{interface} && $chroot_conf->{ip}) {
            print_info("Bringing down network interface alias...") unless $options{q};
            my $s = IO::Socket::INET->new(Proto => 'udp');
            my @interfaces = grep /^$conf->{networking}->{interface}:/, $s->if_list;
            my $found = 0;
            for my $if (@interfaces) {
                if ($s->if_addr($if) eq $chroot_conf->{ip}) {
                    print_info(" found ($if -> $chroot_conf->{ip})...") unless $options{q};
                    my $cmd = "/sbin/ifconfig $if down";
                    my $r = system($cmd);
                    if ($r == 0) {
                        print_info(" done.\n") unless $options{q};
                    }
                    else {
                        print_warning($options{q} ? "Error bringing down network alias $if for $chroot\n" :
                                                    " failure ($cmd).\n");
                    }
                    $found = 1;
                }
            }

            if (!$found && !$options{q}) {
                print_info(" failure.\n");
                print_warning("Couldn't bring down interface alias for $chroot_conf->{ip}: not found\n");
            }
        }
    }
}
