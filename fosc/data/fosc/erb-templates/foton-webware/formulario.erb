<%
    tname = @element.name
    t     = @element
    nombre_iface = tname[1 .. -1].gsub(/_(.)/) {|s| $1.upcase}
%>
# -*- coding: latin1 -*-
'''
    Fichero generado automáticamente por fosc
'''


<% #Falta controlar el nombre de la aplicacion
%>
from lib.Pmr import pmrPage

class form_<%= tname %>(pmrPage):

    def titulo(self):
        return "Formulario de <%= nombre_iface %>"

    def writeContent(self):

        #Obtenemos una instancia de interface sqlobject
        iface = self.GetIface()

        # Definimos los widgets que controlarán los datos del usuario
        from plantillas.form_<%= tname %> import form_<%= tname %>

        #incorporamos el espacio de nombres
        from MCWidgets import Form, Widgets

        t = form_<%= tname %>()
        form = Form.Form('f', args = {'trim_spaces': 1})


        #Referencia a los parámetros enviados desde el formualrio
        request = self.request()
        response = self.response()
        form.define_form_values(request.fields())

        form.add_widget(Widgets.ToolTips, 'tooltips', {})

<%
                    tipos_campos = {}
                    contador = 0
                    t.fields.each do |f|
                        contador +=1

                        formato = ""
                        
                        if f.respond_to? :dataType
                            type = f.dataType
                        else
                            type= @db[f.table][f.name].dataType
                        end

                        case type
                            when 'id', 'int', 'smallint', 'currency'
                                tipos_campos[f.name] = "Numeric"
                            when 'memo'
                                tipos_campos[f.name] = "TextArea"
                                formato = "'cols': '40', 'rows':  '4'"
                            when 'datetime'
                                tipos_campos[f.name] = "DateTimeBox"
                            when 'date'
                                tipos_campos[f.name] = "DateBox"
                            when 'time'
                                tipos_campos[f.name] = "TimeBox"
                            when 'binary'
                                tipos_campos[f.name] = "TextBox"
                            when 'bool'
                                tipos_campos[f.name] = "CheckBox"
                            when 'char', 'varchar'
                                if f.respond_to? :dataType
                                    if f.params == 1
                                        tipos_campos[f.name] = "CheckBox"
                                    else
                                        if f.dataTypeParam.to_i <= 10
                                            tipos_campos[f.name] = "TextBox"
                                            formato = "'maxlength': '#{f.dataTypeParam}', 'class': 'corto',"
                                        elsif f.dataTypeParam.to_i <= 50
                                            tipos_campos[f.name] = "TextBox"
                                            formato = "'maxlength': '#{f.dataTypeParam}', 'class': 'medio',"
                                        elsif f.dataTypeParam.to_i <= 100
                                            tipos_campos[f.name] = "TextBox"
                                            formato = "'maxlength': '#{f.dataTypeParam}', 'class': 'largo',"
                                        else 
                                            tipos_campos[f.name] = "TextArea"
                                            formato = "'rows': '6', 'cols':'50', 'maxlength': '#{f.dataTypeParam}',"
                                        end
                                    end
                                else
                                    campo = @db[f.table][f.name]
                                    if campo.params == 1
                                        tipos_campos[campo.name] = "CheckBox"
                                    else
                                        if campo.dataTypeParam.to_i <= 10
                                            tipos_campos[campo.name] = "TextBox"
                                            formato = "'maxlength': '#{campo.dataTypeParam}', 'class': 'corto',"
                                        elsif campo.dataTypeParam.to_i <= 50
                                            tipos_campos[campo.name] = "TextBox"
                                            formato = "'maxlength': '#{campo.dataTypeParam}', 'class': 'medio',"
                                        elsif campo.dataTypeParam.to_i <= 100 
                                            tipos_campos[campo.name] = "TextBox"
                                            formato = "'maxlength': '#{campo.dataTypeParam}', 'class': 'largo',"
                                        else 
                                            tipos_campos[campo.name] = "TextArea"
                                            formato = "'rows': '6', 'cols':'50', 'maxlength': '#{campo.dataTypeParam}',"
                                        end
                                    end
                                end

                            else
                                tipos_campos[f.name] = "TextBox"
                        end
                        
                        if f.respond_to? :dataType
                            if f.reference
                                if f.name == "insert_user_ref" or f.name == "update_user_ref"
                                        tipos_campos[f.name] = "TextBox"
                                        formato = "'maxlength': '50',"
                                else
                                    tipos_campos[f.name] = "SelectBox"
                                    formato ="'options': [
                                    (str(f['#{f.reference[1]}']), '%(#{f.reference[1]})s' % f)
                                    for f in iface.Get#{ f.reference[0][1 .. -1].gsub(/_(.)/) {|s| $1.upcase}  }() ],"
                                end               
                            end
                        else
                            rf = @db[f.table][f.name].reference
                            if rf
                                if f.name == "insert_user_ref" or f.name == "update_user_ref"
                                        tipos_campos[f.name] = "TextBox"
                                        formato = "'maxlength': '50',"
                                else
                                    tipos_campos[f.name] = "SelectBox"
                                    formato ="'options': [
                                    (str(f['#{rf[1]}']), '%(#{rf[1]})s' % f)
                                    for f in iface.Get#{ rf[0][1 .. -1].gsub(/_(.)/) {|s| $1.upcase} }() ],"
                                end
                           end
                        end

%>

        form.add_widget(Widgets.<%= tipos_campos[f.name] %>, '<%= f.name %>',
            {
                'label':         '<%= f.name %>:',
                'htmlhelp':      'Ayuda_de_<%= f.name %>',
                'tabindex' :     <%= contador %>,
                <%= formato %>
            })
<%
                    end
%>

        if request.hasField('Guardar'):
            values = form.get_form_values()
            if request.hasField('id'):
                # Nos llega un id luego estamos guardando una edición
                id = iface.Update<%= nombre_iface %>(
                        <% f = t.fields[0] %>
                            <%= f.name %>   = request.field('id'),
                        <% t.fields[1 .. -1].each do |f| %>
                            <% case tipos_campos[f.name]
                                when 'SelectBox' %>
                            <%= f.name %>   = values['<%= f.name %>'][0], 
                            <% else %>    
                            <%= f.name %>   = values['<%= f.name %>'], <% end %><% end %>
                    )
            else:
                # No tenemos id, luego estamos insertando uno nuevo
                id = iface.Add<%= nombre_iface %>(
                         <% t.fields[1 .. -1].each do |f| %>
                            <% case tipos_campos[f.name]
                                when 'SelectBox' %>
                            <%= f.name %>   = values['<%= f.name %>'][0], 
                            <% else %>    
                            <%= f.name %>   = values['<%= f.name %>'], <% end %><% end %>
                    )
            self.sendRedirectAndEnd('list_<%= tname %>')
        
        elif request.hasField('Borrar'):
            iface.Deactivate<%= nombre_iface %>(request.field('id'))
            self.sendRedirectAndEnd('form_<%= tname %>')
        
        elif request.hasField('Modificar'):
            reg = iface.Get<%= nombre_iface %>(request.field('id'))
            <% t.fields[1 .. -1].each do |f|
               if f.name == "insert_user_ref" or f.name == "update_user_ref" %>
            form.get_widget('<%= f.name %>').set_arg('initial_value', iface.GetEntities(reg['<%= f.name %>'])['entity_name'])
            <% else %>
            form.get_widget('<%= f.name %>').set_arg('initial_value', str(reg['<%= f.name %>']))
            <% end end %>
        else: #Será nuevo
            pass

        #usar el render para depurar errores en los widgets
        #form.render_widget('nombre_widget')
        t.form = Form.FormTemplate(form)
        self.props['header'] = form.get_prop('header')
        self.write(str(t))


    def _boton(self, titulo, row):
        return ('''<input type="button" title="%(s)s" value="%(s)s" onClick="window.location.href='form_<%= tname %>?%(s)s=1&id=%(r)s'" />''' % {'s': titulo, 'r': row['<%= t.fields[0].name %>']})

