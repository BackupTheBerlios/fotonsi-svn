<%
    tname = @element.name
    t     = @view
%>
# -*- coding: latin1 -*-
'''
    Fichero generado automáticamente por fosc
'''


<% #Falta controlar el nombre de la aplicacion
%>
from lib.Pmr import pmrPage

class form<%= tname.capitalize %>(pmrPage):

    def titulo(self):
        return "pmr::<%= tname.capitalize %>"

    def writeContent(self):

        #Obtenemos una instancia de interface sqlobject
        iface = self.GetIface()

        # Definimos los widgets que controlarán los datos del usuario
        from plantillas.form<%= tname.capitalize %> import form<%= tname.capitalize %>

        #incorporamos el espacio de nombres
        from MCWidgets import Form, Widgets

        t = form<%= tname.capitalize %>()
        form = Form.Form('f', args = {'trim_spaces': 1})


        #Referencia a los parámetros enviados desde el formualrio
        request = self.request()
        response = self.response()
        form.define_form_values(request.fields())

        form.add_widget(Widgets.ToolTips, 'tooltips')

<%
                    contador = 0
                    t.fields.each do |f|
                        contador +=1
                        type = f.type

                        params = []

                        #if ((not f.attributes.include?("notnull")) or f.attributes.include?('default'))
                        #    params << "default = DefaultValue"
                        #end
                        
                        formato = ""
                        case f.type
                            when 'id', 'int', 'smallint', 'currency'
                                    tipo = "Numeric"
                            when 'memo'
                                    tipo = "TextArea"
                                    formato = "'cols': '40', 'rows':  '4'"
                            when 'datetime'
                                    tipo = "DateTimeBox"
                            when 'date'
                                    tipo = "DateBox"
                            when 'time'
                                    tipo = "TimeBox"
                            when 'binary'
                                    tipo = "TextBox"
                            when 'bool'
                                    tipo = "CheckBox"
                            else
                                    tipo = "TextBox"
                        end
                        
                        #if f.reference
                        #    tipo = "SelectBox"
                        #    formato ="'options': [
                        #                ('1', 'Opcion 1'),
                        #                ('2', 'Opcion 2'),
                        #                ('3', 'Opcion 3'),
                        #                ('4', 'Opcion 4')
                        #                ],
                        #                'selected': '1'"
                        #end
%>

        form.add_widget(Widgets.<%= tipo %>, '<%= f.name %>',
            {
                'label':         '<%= f.name %>:',
                'htmlhelp':      'Ayuda_de_<%= f.name %>',
                'tabindex' :     <%= contador %>,
                <%= formato %>
            })
<%
                    end
%>

        
        if request.hasField('Nuevo'):
        elif request.hasField('Guardar'):
            values = form.get_form_values()
            if not request.hasField('<%= t.fields[0].name %>'):
                fid = iface.Add<%= tname.capitalize %>(
                        <% t.fields.each do |f| %>
                            <%= f.name %>   = values['<%= f.name %>'], <% end %>
                    )
            else:
                fid = iface.Update<%= tname.capitalize %>(
                        <% t.fields.each do |f| %>
                            <%= f.name %>   = values['<%= f.name %>'], <% end %>
                    )
        elif request.hasField('Editar'):
            reg = iface.Get<%= tname.capitalize %>(request.hasField('<%= t.fields[0].name %>'))
            <% t.fields.each do |f| %>
            form.get_widget.set_arg('<%= f.name %>', reg['<%= f.name %>'])<% end %>
    
        elif request.hasField('Borrar'):
            #fid = iface.Remove<%= tname.capitalize %>(request.hasField('<%= t.fields[0].name %>'))
            fid = iface.Deactivate<%= tname.capitalize %>(request.hasField('<%= t.fields[0].name %>'))

        form.add_widget(Widgets.ListMultiCol, 'listado',
        {
            'order': {
                        'key':        '<%= t.fields[0].name %>',
                        'reverse':    'n',
                        'url':        'form_<%= tname %>',
                        'extra_args': {} },
            'columns': [
                        <% t.fields.each do |f| %>
                            {'key': '<%= f.name %>', 'name': '<%= f.name %>'}, <% end %>
                       ],
                       'data': iface.Get<%= tname.capitalize %>(),
            'class': 'basica'
        })

        #usar el render para depurar errores en los widgets
        #form.render_widget('nombre_widget')
        t.form = Form.FormTemplate(form)
        self.write(str(t))


