#! /usr/bin/ruby -w

require 'foton'
require 'fosc'
require 'plugins/base_plugin'
require 'commandline'

class FoscApp < CommandLine::Application
    def initialize
        version           Fosc::VERSION
        author            "Fotón Sistemas Inteligentes"
        copyright         "2005-2006 Fotón Sistemas Inteligentes"
        short_description "FOS-DB Converter"
        long_description  "Foton Own Standard for DataBases format extensible converter"
        synopsis          "fosc file.fos [-t|--tables table1,table2,...] [-s|structure-only] [-d|--add-drop-table]\n"+
                          "              [-i|--integrity-only] [--aplic-name|-a aplicname] [outputplugin]\n"+
                          "              [par1 par2 ...]"

        @fosc_options = { :output => 'all' }
        # Compatibility hack
        class <<@fosc_options
            alias_method :old_brackets, :[]

            def [](key)
                old_brackets(key.to_sym)
            end
        end

        option :version #, :names => %w(--version -v)
        option :help
        option :names => %w(--tables -t), :arity => 1,
               :opt_found => lambda {|o,s,v| @fosc_options[:limit_tables] = v.join(',').split(',')}
        option :names => %w(--structure-only -s), :arity => 0,
               :opt_found => lambda {@fosc_options[:output] = 'structure'}
        option :names => %w(--integrity-only -i), :arity => 0,
               :opt_found => lambda {@fosc_options[:output] = 'integrity'}
        option :names => %w(--aplic-name --app-name -a), :arity => 1,
               :opt_found => lambda {|o,s,v| @fosc_options[:aplic] = v}
        option :names => %w(--add-drop-table -d), :arity => 0,
               :opt_found => lambda {|o,s,v| @fosc_options[:drop_table] = true}

        expected_args [1,3]
    end

    def main
        fich, driverType = @args
        driverType       ||= 'mysql'

        fc = Fosc::FosConverter.new(@fosc_options)

        begin
            fc.convert_file(fich)

            require "plugins/#{driverType}"
            driverClass = filename_to_class(driverType)
            driver = Fosc::Plugins.const_get(driverClass).new(@fosc_options)
        rescue Fosc::Elements::Exception => e
            $stderr.puts "Could not load element #{e.plugin_name}: #{e}"
        rescue LoadError, NameError => e
            $stderr.puts "Can't load driver '#{driverType}': #{e}"
            raise e
        end

        begin
            driver.export(fc.dataBase)
        rescue ArgumentError => e
            $stderr.puts "Driver runtime error: #{driverType}: #{e}"
        rescue Fosc::Plugins::FosPluginError => e
            $stderr.puts "Error processing #{fich} with plugin '#{driverType}': #{e.class}: #{e}"
        end
    end
end
